<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.13.3">
      <projectUrl>https://github.com/CanoeVentures/smsi-publisher/</projectUrl>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <jenkins.plugins.slack.SlackNotifier_-SlackJobProperty plugin="slack@1.8.1">
      <teamDomain></teamDomain>
      <token></token>
      <room></room>
      <startNotification>false</startNotification>
      <notifySuccess>true</notifySuccess>
      <notifyAborted>false</notifyAborted>
      <notifyNotBuilt>false</notifyNotBuilt>
      <notifyUnstable>true</notifyUnstable>
      <notifyFailure>true</notifyFailure>
      <notifyBackToNormal>true</notifyBackToNormal>
      <notifyRepeatedFailure>false</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <showCommitList>false</showCommitList>
      <includeCustomMessage>false</includeCustomMessage>
      <customMessage></customMessage>
    </jenkins.plugins.slack.SlackNotifier_-SlackJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@2.4.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <name>origin</name>
        <refspec>+refs/heads/*:refs/remotes/origin/*</refspec>
        <url>git@github.com:CanoeVentures/smsi-publisher.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>origin/br_5.0.0.24</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <browser class="hudson.plugins.git.browser.GitWeb">
      <url>https://github.com/CanoeVentures/smsi-publisher/</url>
    </browser>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.WipeWorkspace/>
    </extensions>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <jdk>JDK1.8.0_u25</jdk>
  <triggers>
    <hudson.triggers.SCMTrigger>
      <spec>27 2 * * *</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -x

cd $WORKSPACE

export VERSION=&quot;5.0.0.24&quot;
export PROJECT=&quot;smsi-publisher&quot;

echo &quot;Updating poms with ${VERSION}_${BUILD_NUMBER}&quot;
groovy /opt/build/scripts/update.groovy ${VERSION}_${BUILD_NUMBER}

echo &quot;Running Maven Versions plugin to update dependency information&quot;
mvn versions:use-latest-versions -Dincludes=com.canoe,com.canoeventures -DgenerateBackupPoms=false
mvn versions:update-parent -DgenerateBackupPoms=false</command>
    </hudson.tasks.Shell>
    <org.jfrog.hudson.maven3.Maven3Builder plugin="artifactory@2.3.1">
      <mavenName>Maven3.2</mavenName>
      <rootPom>pom.xml</rootPom>
      <goals>clean install -U -DskipTests</goals>
      <mavenOpts></mavenOpts>
    </org.jfrog.hudson.maven3.Maven3Builder>
    <hudson.plugins.groovy.Groovy plugin="groovy@1.27">
      <scriptSource class="hudson.plugins.groovy.StringScriptSource">
        <command>def VERSION = &quot;5.0.0.24&quot;
def PROJECT = &quot;smsi-publisher&quot;
def PROJFILE = &quot;/opt/build/scm/scripts/buildServer/properties/projects/$PROJECT/project.properties&quot;

String changelogtemp = &quot;&quot;&quot;
projectRoot=&quot;/opt/cie/jenkins/jobs/smsi-publisher-PackageDeploy-$VERSION/workspace&quot;
commonTargetRoot=&quot;web-app/target&quot;
webappDir=&quot;webapps&quot;

build {

  build_args=&quot;mvn clean install -U -DskipTests&quot;
}


build_package {
    pre_pkg_cmds {
            pre_pkg_1=&quot;mv \$projectRoot/\$commonTargetRoot/smsi-publisher*.war \$projectRoot/\$commonTargetRoot/smsi-publisher.war&quot;
            pre_pkg_2=&quot;cd \$projectRoot/\$commonTargetRoot; chmod +x package.bash; ./package.bash&quot;
    }
    artifacts {
        name {
            bin=&quot;smsi-publisher.war&quot;
            config=&quot;config&quot;
            db=&quot;liquibase&quot;
        }
        location {
            bin=&quot;\$projectRoot/\$commonTargetRoot/&quot;
            config=&quot;\$projectRoot&quot;
            db=&quot;\$projectRoot/data-store/target&quot;
        }
    }
}
&quot;&quot;&quot;

File scriptName = new File(&quot;$PROJFILE&quot;)
        scriptName.write(&quot;${changelogtemp}&quot;)
        println scriptName</command>
      </scriptSource>
      <groovyName>(Default)</groovyName>
      <parameters></parameters>
      <scriptParameters></scriptParameters>
      <properties></properties>
      <javaOpts></javaOpts>
      <classPath></classPath>
    </hudson.plugins.groovy.Groovy>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -x
export VERSION=&quot;5.0.0.24&quot;
export PROJECT=&quot;smsi-publisher&quot;
cat &quot;/opt/build/scm/scripts/buildServer/properties/projects/$PROJECT/project.properties&quot;

/opt/build/scripts/CreateJenkinsPackage.sh $PROJECT $PROJECT br_$VERSION ${BUILD_NUMBER}

echo &quot;Capturing Dependency info in pom.xmls and running dependency:tree&quot;
cd ${WORKSPACE}
find . -type f -name &quot;pom.xml&quot; -exec tar -rvf /opt/build/releaseTars/${PROJECT}/${PROJECT}_${VERSION}_${BUILD_NUMBER}_poms.tar &apos;{}&apos; \;

mvn dependency:tree -DoutputFile=dependsTree.txt

find . -type f -name &quot;dependsTree.txt&quot; -exec cat &gt;&gt; /opt/build/releaseTars/${PROJECT}/${PROJECT}_${VERSION}_${BUILD_NUMBER}_dependencies.txt &apos;{}&apos; \;

# Not used - echo &quot;Creating build branch to store revised pom.xml files&quot;
# Not used - /opt/build/scripts/createBuildLod.sh ${PROJECT} br_${VERSION} br_${VERSION}_${BUILD_NUMBER}

# Not used - cd /opt/checkouts/${PROJECT} || exit 1
# Not used - git checkout br_${VERSION}_${BUILD_NUMBER} || exit 1
# Not used - tar -xvf /opt/build/releaseTars/${PROJECT}/${PROJECT}_${VERSION}_${BUILD_NUMBER}_poms.tar || exit 1
# Not used - echo &quot;Build branch created.  Adding pom files to branch&quot;
# Not used - git add . || exit 1
# Not used - git commit -m&quot;Checking in .pom file modifications for build ${VERSION}_${BUILD_NUMBER} dependency versions&quot; || exit 1
# Not used - git push origin || exit 1


echo &quot;Dependency tree output is here: http://cvbuild.cv.infra/releaseTars/${PROJECT}/${PROJECT}_${VERSION}_${BUILD_NUMBER}_dependencies.txt&quot;
echo &quot;Poms are captured in .tar format here: http://cvbuild.cv.infra/releaseTars/${PROJECT}/${PROJECT}_${VERSION}_${BUILD_NUMBER}_poms.tar&quot;</command>
    </hudson.tasks.Shell>
    <hudson.plugins.parameterizedtrigger.TriggerBuilder plugin="parameterized-trigger@2.29">
      <configs>
        <hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.CurrentBuildParameters/>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
              <properties>SelEnv=devint</properties>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <projects>ScrumResurrectState</projects>
          <condition>ALWAYS</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
          <block>
            <buildStepFailureThreshold>
              <name>FAILURE</name>
              <ordinal>2</ordinal>
              <color>RED</color>
              <completeBuild>true</completeBuild>
            </buildStepFailureThreshold>
            <unstableThreshold>
              <name>UNSTABLE</name>
              <ordinal>1</ordinal>
              <color>YELLOW</color>
              <completeBuild>true</completeBuild>
            </unstableThreshold>
            <failureThreshold>
              <name>FAILURE</name>
              <ordinal>2</ordinal>
              <color>RED</color>
              <completeBuild>true</completeBuild>
            </failureThreshold>
          </block>
          <buildAllNodesWithLabel>false</buildAllNodesWithLabel>
        </hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.TriggerBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
export VERSION=&quot;5.0.0.24_${BUILD_NUMBER}&quot;
export Component=&quot;smsi-publisher&quot;; echo &quot;Component - $Component&quot;
export DB_Rebuild=&quot;Yes&quot;; echo &quot;DB_Rebuild - $DB_Rebuild&quot;
export Version=${VERSION}; echo &quot;Version - $Version&quot;
export Clear_Logs=&quot;Yes&quot;; echo &quot;Clear_Logs - $Clear_Logs&quot;
export DeployTarg=&quot;devint&quot;; echo &quot;DeployTarg - $DeployTarg&quot;
export DeployUser=&quot;Jenkins&quot;; echo &quot;DeployUser = $DeployUser&quot;
export BUILD_TAG

ssh cvbuild.cv.dr &quot;bash -c \&quot;source ~/.bash_profile &amp;&amp; cd /opt/build/scripts &amp;&amp; ./Single_Component_Deploy.sh $Component $DB_Rebuild $Clear_Logs $DeployTarg $BUILD_TAG $DeployUser $JOB_NAME $BUILD_NUMBER $Version\&quot; &quot;</command>
    </hudson.tasks.Shell>
    <org.jfrog.hudson.maven3.Maven3Builder plugin="artifactory@2.3.1">
      <mavenName>Maven3</mavenName>
      <rootPom>${WORKSPACE}/integration-tests/pom.xml</rootPom>
      <goals>test -PJenkinsNightlyBuild</goals>
      <mavenOpts></mavenOpts>
    </org.jfrog.hudson.maven3.Maven3Builder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

VERSION=&quot;5.0.0.24_${BUILD_NUMBER}&quot;

echo &quot;${VERSION}&quot; &gt; /var/www/html/devint/smsi-publisher.txt</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.jira.JiraIssueUpdater plugin="jira@2.0.2"/>
    <hudson.plugins.git.GitPublisher plugin="git@2.4.0">
      <configVersion>2</configVersion>
      <pushMerge>false</pushMerge>
      <pushOnlyIfSuccess>false</pushOnlyIfSuccess>
      <forcePush>false</forcePush>
      <tagsToPush>
        <hudson.plugins.git.GitPublisher_-TagToPush>
          <targetRepoName>origin</targetRepoName>
          <tagName>v_5.0.0.24_${BUILD_NUMBER}</tagName>
          <tagMessage></tagMessage>
          <createTag>true</createTag>
          <updateTag>false</updateTag>
        </hudson.plugins.git.GitPublisher_-TagToPush>
      </tagsToPush>
    </hudson.plugins.git.GitPublisher>
    <hudson.tasks.Mailer plugin="mailer@1.15">
      <recipients>ken.leider@canoeventures.com</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
    <jenkins.plugins.slack.SlackNotifier plugin="slack@1.8.1">
      <teamDomain>canoeventures</teamDomain>
      <authToken>ulqvAk36Srn0kGF9JMh4UJn5</authToken>
      <buildServerUrl>http://cvbuild.cv.infra:7001/</buildServerUrl>
      <room>#scm</room>
    </jenkins.plugins.slack.SlackNotifier>
  </publishers>
  <buildWrappers>
    <org.jfrog.hudson.maven3.ArtifactoryMaven3Configurator plugin="artifactory@2.3.1">
      <details>
        <artifactoryName>https://canoe-ventures.artifactoryonline.com/canoe_ventures</artifactoryName>
        <artifactoryUrl>https://canoe-ventures.artifactoryonline.com/canoe_ventures</artifactoryUrl>
        <deployReleaseRepository>
          <keyFromText>libs-releases-local</keyFromText>
          <keyFromSelect>libs-releases-local</keyFromSelect>
          <dynamicMode>false</dynamicMode>
        </deployReleaseRepository>
        <deploySnapshotRepository>
          <keyFromText>libs-snapshots-local</keyFromText>
          <keyFromSelect>libs-snapshots-local</keyFromSelect>
          <dynamicMode>false</dynamicMode>
        </deploySnapshotRepository>
        <stagingPlugin/>
      </details>
      <resolverDetails>
        <artifactoryName>https://canoe-ventures.artifactoryonline.com/canoe_ventures</artifactoryName>
        <artifactoryUrl>https://canoe-ventures.artifactoryonline.com/canoe_ventures</artifactoryUrl>
        <resolveSnapshotRepository>
          <keyFromText></keyFromText>
          <keyFromSelect></keyFromSelect>
          <dynamicMode>false</dynamicMode>
        </resolveSnapshotRepository>
        <resolveReleaseRepository>
          <keyFromText></keyFromText>
          <keyFromSelect></keyFromSelect>
          <dynamicMode>false</dynamicMode>
        </resolveReleaseRepository>
        <stagingPlugin/>
      </resolverDetails>
      <deployArtifacts>true</deployArtifacts>
      <artifactDeploymentPatterns>
        <includePatterns></includePatterns>
        <excludePatterns></excludePatterns>
      </artifactDeploymentPatterns>
      <includeEnvVars>false</includeEnvVars>
      <deployBuildInfo>true</deployBuildInfo>
      <runChecks>false</runChecks>
      <violationRecipients></violationRecipients>
      <includePublishArtifacts>false</includePublishArtifacts>
      <scopes></scopes>
      <discardOldBuilds>false</discardOldBuilds>
      <discardBuildArtifacts>true</discardBuildArtifacts>
      <matrixParams></matrixParams>
      <enableIssueTrackerIntegration>false</enableIssueTrackerIntegration>
      <filterExcludedArtifactsFromBuild>false</filterExcludedArtifactsFromBuild>
      <enableResolveArtifacts>false</enableResolveArtifacts>
      <envVarsPatterns>
        <includePatterns></includePatterns>
        <excludePatterns>*password*,*secret*</excludePatterns>
      </envVarsPatterns>
      <licenseAutoDiscovery>true</licenseAutoDiscovery>
      <disableLicenseAutoDiscovery>false</disableLicenseAutoDiscovery>
      <aggregateBuildIssues>false</aggregateBuildIssues>
      <aggregationBuildStatus>Released</aggregationBuildStatus>
      <recordAllDependencies>false</recordAllDependencies>
      <blackDuckRunChecks>false</blackDuckRunChecks>
      <blackDuckAppName></blackDuckAppName>
      <blackDuckAppVersion></blackDuckAppVersion>
      <blackDuckReportRecipients></blackDuckReportRecipients>
      <blackDuckScopes></blackDuckScopes>
      <blackDuckIncludePublishedArtifacts>false</blackDuckIncludePublishedArtifacts>
      <autoCreateMissingComponentRequests>true</autoCreateMissingComponentRequests>
      <autoDiscardStaleComponentRequests>true</autoDiscardStaleComponentRequests>
    </org.jfrog.hudson.maven3.ArtifactoryMaven3Configurator>
  </buildWrappers>
</project>