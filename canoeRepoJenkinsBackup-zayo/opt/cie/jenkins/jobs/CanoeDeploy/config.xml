<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>&lt;h2&gt;Canoe System-level Deployment job&lt;/h2&gt; &#xd;
&lt;br&gt;&#xd;
&lt;h3&gt;Deployment of multiple Canoe products to target system (devint, scrumx, cloudbased)&lt;/h3&gt;&#xd;
&lt;hr&gt;&#xd;
&lt;h4&gt;User can select application and database components to be delivered to target systems.  Version deployed will be derived from the current DevInt version and DBs rebuilt by default.&lt;/h4&gt;&#xd;
&#xd;
Parameter Driven.  User supplies needed parameters to initiate the deploy job</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.TextParameterDefinition>
          <name>DeployUser</name>
          <description>&lt;h2&gt;Enter the User id and summary of purpose for deployment&lt;/h2&gt;</description>
          <defaultValue></defaultValue>
        </hudson.model.TextParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>DeployTarg</name>
          <description>&lt;h2&gt;Select Target Deployment Environment&lt;/h2&gt;</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>devint</string>
              <string>cloud</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <com.cwctravel.hudson.plugins.extended__choice__parameter.ExtendedChoiceParameterDefinition plugin="extended-choice-parameter@0.28">
          <name>Components</name>
          <description>&lt;h2&gt;Select Components to install.&lt;/h2&gt;</description>
          <quoteValue>false</quoteValue>
          <visibleItemCount>30</visibleItemCount>
          <type>PT_CHECKBOX</type>
          <value>ads-core, caas-core, dai-etl-feeder, oss_bar, ops-dt-domain, dai-billing, smsi-publisher, Dynamic-Ad-Insertion-cm, Dynamic-Ad-Insertion-engine, dai-cip-feedback, dai-cip, dai-lincoln, dai-smsi, int-test-support, ops-dce-scte-cfa-reporting-agent, ops-dce-safi-reporting-agent, ops-dt, smsi-admin, dai_amm, caas-admin</value>
          <propertyFile></propertyFile>
          <propertyKey></propertyKey>
          <defaultValue></defaultValue>
          <defaultPropertyFile></defaultPropertyFile>
          <defaultPropertyKey></defaultPropertyKey>
        </com.cwctravel.hudson.plugins.extended__choice__parameter.ExtendedChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>DB_Rebuild</name>
          <description>&lt;h2&gt;If there is a DB associated with these components, do you want to rebuild &lt;b&gt;ALL&lt;/b&gt; schemas from scratch or perform just a liquibase update against &lt;b&gt;ALL&lt;/b&gt; existing schemas?&lt;/h2&gt;</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>No</string>
              <string>Yes</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers class="vector"/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/ksh

echo &quot;&lt;b&gt;--- Deployment ID:&lt;/b&gt; ${BUILD_TAG} - ${BUILD_ID}&lt;br&gt;&quot; &gt;&gt; /opt/build/scm/scripts/buildServer/log/${BUILD_TAG}.log
echo &quot;&lt;b&gt;System Delivery to ${DeployTarg} by ${DeployUser} &lt;/b&gt;&lt;br&gt;&quot; &gt;&gt; /opt/build/scm/scripts/buildServer/log/${BUILD_TAG}.log
export SelComp=`echo &quot;$Components&quot; | sed &apos;s?,? ?g`

for Component in $SelComp
 do
# Set getVer and DB_Rebuild flags for mandatory versioning from DevInt and DB rebuild on System Generation
#
getVer=&quot;0&quot;

export DB_Rebuild

# Setup APP/DB specific variables
#
case $Component in
   caas-core)
     export DB_USER=&quot;CAAS&quot;
     export DB_PASS=&quot;CAAS&quot;
   ;;
   ads-core)
     export DB_USER=&quot;ADS&quot;
     export DB_PASS=&quot;ADS&quot;
   ;;
   dai-etl-feeder)
     export DB_USER=&quot;REPORTING_ODS&quot;
     export DB_PASS=&quot;REPORTING_ODS&quot;
   ;;
   ops-dt-domain)
     export DB_USER=&quot;OPS_DT&quot;
     export DB_PASS=&quot;OPS_DT&quot;
   ;;
   oss_bar)
     export DB_USER=&quot;OSS_BAR&quot;
     export DB_PASS=&quot;OSS_BAR&quot;
   ;;
   smsi-publisher)
     export DB_USER=&quot;SMSIPUB&quot;
     export DB_PASS=&quot;SMSIPUB&quot;
   ;;
esac

# Setup Environment specific variables
#
case $DeployTarg in
   devint)
     export DeployTarg
     export targname=&quot;dvappdai01&quot;
     export APPSERVER_IP=&quot;10.13.18.113&quot;
     export SIDTarg=&quot;dev003&quot;
     export DBIP=&quot;10.13.18.111&quot;
     export JDBC_URL=&quot;jdbc:oracle:thin:@10.13.18.111:1522:dev003&quot;
     export DB_USER=&quot;DI_${DB_USER}&quot;
     export DB_PASS=&quot;DI_${DB_PASS}&quot;
     export ETL_CAAS=&quot;DI_CAAS&quot;
     export ETL_BAR=&quot;DI_OSS-BAR&quot;
     export ETL_BILLING=&quot;DI_BILLING&quot;
   ;;
   scrum1)
     export targname=&quot;dvappdai02&quot;
     export APPSERVER_IP=&quot;10.13.18.115&quot;
     export SIDTarg=&quot;scrum001&quot;
     export DBIP=&quot;10.13.18.119&quot;
     export JDBC_URL=&quot;jdbc:oracle:thin:@10.13.18.119:1522:scrum001&quot;
     export DB_USER=&quot;SC1_${DB_USER}&quot;
     export DB_PASS=&quot;SC1_${DB_PASS}&quot;
     export ETL_CAAS=&quot;SC1_CAAS&quot;
     export ETL_BAR=&quot;SC1_OSS-BAR&quot;
     export ETL_BILLING=&quot;SC1_BILLING&quot;
   ;;
   scrum2)
     export targname=&quot;dvappdai03&quot;
     export APPSERVER_IP=&quot;10.13.18.116&quot;
     export SIDTarg=&quot;scrum002&quot;
     export DBIP=&quot;10.13.18.120&quot;
     export JDBC_URL=&quot;jdbc:oracle:thin:@10.13.18.120:1522:scrum002&quot;
     export DB_USER=&quot;SC2_${DB_USER}&quot;
     export DB_PASS=&quot;SC2_${DB_PASS}&quot;
     export ETL_CAAS=&quot;SC2_CAAS&quot;
     export ETL_BAR=&quot;SC2_OSS-BAR&quot;
     export ETL_BILLING=&quot;SC2_BILLING&quot;
   ;;
   scrum3)
     export targname=&quot;dvappdai04&quot;
     export APPSERVER_IP=&quot;10.13.18.117&quot;
     export SIDTarg=&quot;scrum003&quot;
     export DBIP=&quot;10.13.18.121&quot;
     export JDBC_URL=&quot;jdbc:oracle:thin:@10.13.18.121:1522:scrum003&quot;
     export DB_USER=&quot;SC3_${DB_USER}&quot;
     export DB_PASS=&quot;SC3_${DB_PASS}&quot;
     export ETL_CAAS=&quot;SC3_CAAS&quot;
     export ETL_BAR=&quot;SC3_OSS-BAR&quot;
     export ETL_BILLING=&quot;SC3_BILLING&quot;
   ;;
esac


# Verify User supplies a Username and Purpose for the Deployment
#
if [ -z ${DeployUser} ] ; then
    print &quot;&lt;h2&gt;User must supply a user name and summary of deploy purpose&lt;/h2&gt;&quot;
    exit 1
fi

cd /opt/checkouts/oss_deployment/scripts

case $Component in
################################################
   dai-billing) 
       Deployed_Version=`ssh tcserver@${targname} &quot;grep Implementation-Version /opt/tcserver/instances/billing/webapps/dai-billing/META-INF/MANIFEST.MF | cut -d : -f 2 | tr -d &apos; &apos;  | tr -d &apos;\r&apos;&quot;`
        Version=`ssh tcserver@dvappdai01 &quot;grep Implementation-Version /opt/tcserver/instances/billing/webapps/dai-billing/META-INF/MANIFEST.MF | cut -d : -f 2 | tr -d &apos; &apos;  | tr -d &apos;\r&apos;&quot;`
       echo &quot;&lt;b&gt;Upgrading ${Component} from ${Deployed_Version} to ${Version}&lt;/b&gt;&lt;br&gt;&quot; &gt;&gt; /opt/build/scm/scripts/buildServer/log/${BUILD_TAG}.log
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;Upgrading ${Component} from ${Deployed_Version} to ${Version}&quot;
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;&quot;

       /opt/build/scripts/tcServerAdmin.sh ${targname} billing stop
       cd /opt/build/scripts
       ./kill_dbsessions.sh -a dai-billing -e ${DeployTarg}
       if [[ ${DB_Rebuild} = &quot;Yes&quot; ]] ; then
        cd /opt/checkouts/dai-billing/grails-app/migrations/cisys
        export SQLCONN=&quot;(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=${DBIP})(PORT=1522)))(CONNECT_DATA=(SERVICE_NAME=${SIDTarg})))&quot;
sqlplus -S cm_system/oracle123@$SQLCONN &lt;&lt;!
set heading off
define DeployTarg=&apos;$DeployTarg&apos;
set verify off
@genUser.${DeployTarg}.sql
exit sql.sqlcode
!
      STATUS=${?}
      if [[ ${STATUS} != &quot;0&quot; ]]; then
        echo &quot;Schema creation failed&quot;
        exit ${STATUS}
      fi
       fi
       cd /opt/checkouts/oss_deployment/scripts
       ./tmpdeploy.sh -a ${Component} -e ${DeployTarg} -r ${Version} -v
       echo &quot;dai-billing-${Version}&quot; &gt; /var/www/html/${DeployTarg}/bill.txt
       ;;
################################################
    dai_amm)
        Deployed_Version=`ssh tcserver@${targname}&quot;grep Implementation-Version /opt/tcserver/instances/dai_amm/webapps/dai_amm/META-INF/MANIFEST.MF | cut -d : -f 2 | tr -d &apos; &apos;  | tr -d &apos;\r&apos;&quot;`
        Version=`ssh tcserver@dvappdai01 &quot;grep Implementation-Version /opt/tcserver/instances/dai_amm/webapps/dai_amm/META-INF/MANIFEST.MF | cut -d : -f 2 | tr -d &apos; &apos;  | tr -d &apos;\r&apos;&quot;`
        echo &quot;&lt;b&gt;Upgrading ${Component} from ${Deployed_Version} to ${Version}&lt;/b&gt;&lt;br&gt;&quot; &gt;&gt; /opt/build/scm/scripts/buildServer/log/${BUILD_TAG}.log
        echo &quot;-----------------------------------------------------------------------------------&quot;
        echo &quot;Upgrading ${Component} from ${Deployed_Version} to ${Version}&quot;
        echo &quot;-----------------------------------------------------------------------------------&quot;
        echo &quot;&quot;

         if [[ ${DB_Rebuild} = &quot;Yes&quot; ]] ; then
        /opt/build/scripts/tcServerAdmin.sh ${targname} dai_amm stop
        ./kill_dbsessions.sh -a dai_amm -e ${DeployTarg}
        cd /opt/checkouts/dai_amm/grails-app/migrations/cisys
        export SQLCONN=&quot;(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=${DBIP})(PORT=1522)))(CONNECT_DATA=(SERVICE_NAME=${SIDTarg})))&quot;
sqlplus -S cm_system/oracle123@$SQLCONN &lt;&lt;!
set heading off
define DeployTarg=&apos;$DeployTarg&apos;
set verify off
@genUser.${DeployTarg}.sql
exit sql.sqlcode
!
         STATUS=${?}
         if [[ ${STATUS} != &quot;0&quot; ]]; then
          echo &quot;Schema creation failed&quot;
          exit ${STATUS}
         fi
       fi
        cd /opt/checkouts/oss_deployment/scripts
       ./tmpdeploy.sh -a ${Component} -e ${DeployTarg} -r ${Version} -v
        echo &quot;dai_amm-${Version}&quot; &gt; /var/www/html/${DeployTarg}/amm.txt
    ;;
################################################
    Dynamic-Ad-Insertion-cm)
       Deployed_Version=`ssh tcserver@${targname} &quot;grep Implementation-Version /opt/tcserver/instances/cm/webapps/Dynamic-Ad-Insertion-cm*/META-INF/MANIFEST.MF | cut -d : -f 2 | tr -d &apos; &apos;  | tr -d &apos;\r&apos;&quot;`
       Version=`ssh tcserver@dvappdai01 &quot;grep Implementation-Version /opt/tcserver/instances/cm/webapps/Dynamic-Ad-Insertion-cm*/META-INF/MANIFEST.MF | cut -d : -f 2 | tr -d &apos; &apos;  | tr -d &apos;\r&apos;&quot;`
       echo &quot;&lt;b&gt;Upgrading ${Component} from ${Deployed_Version} to ${Version}&lt;/b&gt;&lt;br&gt;&quot; &gt;&gt; /opt/build/scm/scripts/buildServer/log/${BUILD_TAG}.log
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;Upgrading ${Component} from ${Deployed_Version} to ${Version}&quot;
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;&quot;

       print &quot;Upgrading ${Component} from ${Deployed_Version} to ${Version}&quot;
      ./tmpdeployapp.sh -a ${Component} -t ${Component} -e ${DeployTarg} -r ${Version} -i cm -v
       echo &quot;Dynamic-Ad-Insertion-cm-${Version}&quot; &gt; /var/www/html/${DeployTarg}/cm.txt
       ;;
################################################
     caas-admin)
       Deployed_Version=`ssh tcserver@${targname} &quot;grep Implementation-Version /opt/tcserver/instances/caas-admin/webapps/caas-admin/META-INF/MANIFEST.MF | cut -d : -f 2 | tr -d &apos; &apos; | tr -d &apos;\r&apos;&quot;`
       Version=`ssh tcserver@dvappdai01 &quot;grep Implementation-Version /opt/tcserver/instances/caas-admin/webapps/caas-admin/META-INF/MANIFEST.MF | cut -d : -f 2 | tr -d &apos; &apos; | tr -d &apos;\r&apos;&quot;`
       echo &quot;&lt;b&gt;Upgrading ${Component} from ${Deployed_Version} to ${Version}&lt;/b&gt;&lt;br&gt;&quot; &gt;&gt; /opt/build/scm/scripts/buildServer/log/${BUILD_TAG}.log
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;Upgrading ${Component} from ${Deployed_Version} to ${Version}&quot;
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;&quot;

      cd /opt/checkouts/oss_deployment/scripts

     ./tmpdeployapp.sh -a ${Component} -t ${Component} -e ${DeployTarg} -r ${Version} -i ${Component} -v 
      echo &quot;caas-admin-${Version}&quot; &gt; /var/www/html/${DeployTarg}/ca.txt
    ;;
################################################
    Dynamic-Ad-Insertion-engine)
       Deployed_Version=`ssh tcserver@${targname} &quot;grep Implementation-Version /opt/tcserver/instances/ads/webapps/ads*/META-INF/MANIFEST.MF | cut -d : -f 2 | tr -d &apos; &apos;  | tr -d &apos;\r&apos;&quot;`
       Version=`ssh tcserver@dvappdai01 &quot;grep Implementation-Version /opt/tcserver/instances/ads/webapps/ads*/META-INF/MANIFEST.MF | cut -d : -f 2 | tr -d &apos; &apos;  | tr -d &apos;\r&apos;&quot;`
       echo &quot;&lt;b&gt;Upgrading ${Component} from ${Deployed_Version} to ${Version}&lt;/b&gt;&lt;br&gt;&quot; &gt;&gt; /opt/build/scm/scripts/buildServer/log/${BUILD_TAG}.log
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;Upgrading ${Component} from ${Deployed_Version} to ${Version}&quot;
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;&quot;

       ./tmpdeployapp.sh -a ads -t ${Component} -e ${DeployTarg} -r ${Version} -i ads -v
       ./tmpdeployapp.sh -a ads -t ${Component} -e ${DeployTarg} -r ${Version} -i psn -v
       ./tmpdeployapp.sh -a cis -t ${Component} -e ${DeployTarg} -r ${Version} -i cis -v
       echo &quot;Dynamic-Ad-Insertion-engine-${Version}&quot; &gt; /var/www/html/${DeployTarg}/de.txt
       ;;
################################################    
    dai-cip-feedback)
       Deployed_Version=`ssh tcserver@${targname} &quot;grep Implementation-Version /opt/tcserver/instances/cip/webapps/cip-server*/META-INF/MANIFEST.MF | cut -d : -f 2 | tr -d &apos; &apos;  | tr -d &apos;\r&apos;&quot;`
       Version=`ssh tcserver@dvappdai01 &quot;grep Implementation-Version /opt/tcserver/instances/cip/webapps/cip-server*/META-INF/MANIFEST.MF | cut -d : -f 2 | tr -d &apos; &apos;  | tr -d &apos;\r&apos;&quot;`
       cd /opt/checkouts/oss_deployment/scripts
       echo &quot;&lt;b&gt;Upgrading ${Component} from ${Deployed_Version} to ${Version}&lt;/b&gt;&lt;br&gt;&quot; &gt;&gt; /opt/build/scm/scripts/buildServer/log/${BUILD_TAG}.log
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;Upgrading ${Component} from ${Deployed_Version} to ${Version}&quot;
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;&quot;

      ./tmpdeployapp.sh -a cip-server -t ${Component} -e ${DeployTarg} -r ${Version} -i cip -v

       echo &quot;dai-cip-feedback-${Version}&quot; &gt; /var/www/html/scrum1/cip-feedback.txt 
       ;;
################################################
    dai-cip)
       Deployed_Version=`ssh tcserver@${targname} &quot;cd /opt/tcserver/dai-cip/cip-batch; jar xf dai-cip-batch.jar META-INF/MANIFEST.MF; grep Implementation-Version META-INF/MANIFEST.MF | cut -d : -f 2 | tr -d &apos; &apos;  | tr -d &apos;\r&apos;; rm -fR META-INF&quot;`
       Version=`ssh tcserver@dvappdai01 &quot;cd /opt/tcserver/dai-cip/cip-batch; jar xf dai-cip-batch.jar META-INF/MANIFEST.MF; grep Implementation-Version META-INF/MANIFEST.MF | cut -d : -f 2 | tr -d &apos; &apos;  | tr -d &apos;\r&apos;; rm -fR META-INF&quot;`
       cd /opt/checkouts/oss_deployment/scripts
       echo &quot;&lt;b&gt;Upgrading ${Component} from ${Deployed_Version} to ${Version}&lt;/b&gt;&lt;br&gt;&quot; &gt;&gt; /opt/build/scm/scripts/buildServer/log/${BUILD_TAG}.log
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;Upgrading ${Component} from ${Deployed_Version} to ${Version}&quot;
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;&quot;

       ./deployjar.sh -a dai-cip -t ${Component} -e ${DeployTarg} -r ${Version} -v
       echo &quot;dai-cip-${Version}&quot; &gt; /var/www/html/${DeployTarg}/cip.txt
       ;;
################################################   
    dai-lincoln)
        Deployed_Version=`ssh tcserver@${targname} &quot;cd /opt/tcserver/log_splitter; jar xf lincoln-1.2.0.jar META-INF/MANIFEST.MF; grep Implementation-Version META-INF/MANIFEST.MF | cut -d : -f 2 | tr -d &apos; &apos;  | tr -d &apos;\r&apos;; rm -fR META-INF&quot;`
        Version=`ssh tcserver@dvappdai01 &quot;cd /opt/tcserver/log_splitter; jar xf lincoln-1.2.0.jar META-INF/MANIFEST.MF; grep Implementation-Version META-INF/MANIFEST.MF | cut -d : -f 2 | tr -d &apos; &apos;  | tr -d &apos;\r&apos;; rm -fR META-INF&quot;`
       cd /opt/checkouts/oss_deployment/scripts
       echo &quot;&lt;b&gt;Upgrading ${Component} from ${Deployed_Version} to ${Version}&lt;/b&gt;&lt;br&gt;&quot; &gt;&gt; /opt/build/scm/scripts/buildServer/log/${BUILD_TAG}.log
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;Upgrading ${Component} from ${Deployed_Version} to ${Version}&quot;
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;&quot;

       ./deployjar.sh -a dai-lincoln -t ${Component} -e ${DeployTarg} -r ${Version} -v
       echo &quot;dai-lincoln-${Version}&quot; &gt; /var/www/html/${DepolyTarg}/log.txt
       ;;
################################################
    dai-smsi)
       Deployed_Version=`ssh tcserver@${targname} &quot;grep Implementation-Version /opt/tcserver/instances/smsi/webapps/safi-smsi-server*/META-INF/MANIFEST.MF | cut -d : -f 2 | tr -d &apos; &apos;  | tr -d &apos;\r&apos;&quot;`
       Version=`ssh tcserver@dvappdai01 &quot;grep Implementation-Version /opt/tcserver/instances/smsi/webapps/safi-smsi-server*/META-INF/MANIFEST.MF | cut -d : -f 2 | tr -d &apos; &apos;  | tr -d &apos;\r&apos;&quot;`
       cd /opt/checkouts/oss_deployment/scripts
       echo &quot;&lt;b&gt;Upgrading ${Component} from ${Deployed_Version} to ${Version}&lt;/b&gt;&lt;br&gt;&quot; &gt;&gt; /opt/build/scm/scripts/buildServer/log/${BUILD_TAG}.log
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;Upgrading ${Component} from ${Deployed_Version} to ${Version}&quot;
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;&quot;

       ./tmpdeployapp.sh -a safi-smsi-server -t ${Component} -e ${DeployTarg} -i smsi -r ${Version} -v
       print dai-smsi-${Version} &gt; /var/www/html/${DeployTarg}/smsi.txt
       ;;
################################################
    int-test-support)
        Deployed_Version=`ssh tcserver@dvappdai01 &quot;grep Implementation-Version /opt/tcserver/instances/mock_svr/webapps/int-test-support/META-INF/MANIFEST.MF | cut -d : -f 2 | tr -d &apos; &apos;  | tr -d &apos;\r&apos;&quot;` 
        Version=`ssh tcserver@dvappdai01 &quot;grep Implementation-Version /opt/tcserver/instances/mock_svr/webapps/int-test-support/META-INF/MANIFEST.MF | cut -d : -f 2 | tr -d &apos; &apos;  | tr -d &apos;\r&apos;&quot;` 
       cd /opt/checkouts/oss_deployment/scripts
       echo &quot;&lt;b&gt;Upgrading ${Component} from ${Deployed_Version} to ${Version}&lt;/b&gt;&lt;br&gt;&quot; &gt;&gt; /opt/build/scm/scripts/buildServer/log/${BUILD_TAG}.log
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;Upgrading ${Component} from ${Deployed_Version} to ${Version}&quot;
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;&quot;

      ./tmpdeployapp.sh -a int-test-support -t ${Component} -e ${DeployTarg} -r ${Version} -i mock_svr -v
       echo &quot;int-test-support-${Version}&quot; &gt; /var/www/html/${Deploytarg}/mock_svr.txt      
       ;;
################################################
    ops-dce-scte-cfa-reporting-agent)
       Deployed_Version=`ssh tcserver@${targname} &quot;grep Implementation-Version /opt/tcserver/instances/dce-agent-001/webapps/ops-dce-scte-cfa-reporting-agent/META-INF/MANIFEST.MF | cut -d : -f 2 | tr -d &apos; &apos;  | tr -d &apos;\r&apos;&quot;`
       Version=`ssh tcserver@dvappdai01 &quot;grep Implementation-Version /opt/tcserver/instances/dce-agent-001/webapps/ops-dce-scte-cfa-reporting-agent/META-INF/MANIFEST.MF | cut -d : -f 2 | tr -d &apos; &apos;  | tr -d &apos;\r&apos;&quot;`
       cd /opt/checkouts/oss_deployment/scripts
       echo &quot;&lt;b&gt;Upgrading ${Component} from ${Deployed_Version} to ${Version}&lt;/b&gt;&lt;br&gt;&quot; &gt;&gt; /opt/build/scm/scripts/buildServer/log/${BUILD_TAG}.log
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;Upgrading ${Component} from ${Deployed_Version} to ${Version}&quot;
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;&quot;

       ./tmpdeployapp.sh -a ${Component}  -t ${Component} -e ${DeployTarg} -r ${Version} -i dce-agent-001 -v
       echo &quot;ops-dce-scte-cfa-reporting-agent-${Version}&quot; &gt; /var/www/html/${DeployTarg}/dce-agent-001.txt 
       ;;
################################################
    ops-dt)
       Deployed_Version=`ssh tcserver@${targname} &quot;grep Implementation-Version /opt/tcserver/instances/ops-dt/webapps/ops-dt/META-INF/MANIFEST.MF | cut -d : -f 2 | tr -d &apos; &apos;  | tr -d &apos;\r&apos;&quot;`
       Version=`ssh tcserver@dvappdai01 &quot;grep Implementation-Version /opt/tcserver/instances/ops-dt/webapps/ops-dt/META-INF/MANIFEST.MF | cut -d : -f 2 | tr -d &apos; &apos;  | tr -d &apos;\r&apos;&quot;`
       cd /opt/checkouts/oss_deployment/scripts
       echo &quot;&lt;b&gt;Upgrading ${Component} from ${Deployed_Version} to ${Version}&lt;/b&gt;&lt;br&gt;&quot; &gt;&gt; /opt/build/scm/scripts/buildServer/log/${BUILD_TAG}.log
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;Upgrading ${Component} from ${Deployed_Version} to ${Version}&quot;
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;&quot;

       ./tmpdeployapp.sh -a ${Component} -t ${Component} -e ${DeployTarg} -r ${Version} -i ${Component} -v
       echo &quot;ops-dt-${Version}&quot; &gt; /var/www/html/${DeployTarg}/opsdt.txt
       ;;
################################################          
    oss_bar)
       Deployed_Version=`ssh tcserver@${targname} &quot;grep Implementation-Version /opt/tcserver/instances/oss_bar/webapps/oss_bar/META-INF/MANIFEST.MF | cut -d : -f 2 | tr -d &apos; &apos;  | tr -d &apos;\r&apos;&quot;`
       Version=`ssh tcserver@dvappdai01 &quot;grep Implementation-Version /opt/tcserver/instances/oss_bar/webapps/oss_bar/META-INF/MANIFEST.MF | cut -d : -f 2 | tr -d &apos; &apos;  | tr -d &apos;\r&apos;&quot;`
       echo &quot;&lt;b&gt;Upgrading ${Component} from ${Deployed_Version} to ${Version}&lt;/b&gt;&lt;br&gt;&quot; &gt;&gt; /opt/build/scm/scripts/buildServer/log/${BUILD_TAG}.log
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;Upgrading ${Component} from ${Deployed_Version} to ${Version}&quot;
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;&quot;

       /opt/build/scripts/tcServerAdmin.sh ${targname} oss_bar stop
       cd /opt/build/scripts
       ./kill_dbsessions.sh -a oss_bar -e ${DeployTarg}
       if [[ ${DB_Rebuild} = &quot;Yes&quot; ]] ; then
        cd /opt/checkouts/oss_bar/grails-app/migrations/cisys
        export SQLCONN=&quot;(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=${DBIP})(PORT=1522)))(CONNECT_DATA=(SERVICE_NAME=${SIDTarg})))&quot;
sqlplus -S cm_system/oracle123@$SQLCONN &lt;&lt;!
set heading off
define DeployTarg=&apos;$DeployTarg&apos;
set verify off
@genUser.${DeployTarg}.sql
exit sql.sqlcode
!
      STATUS=${?}
      if [[ ${STATUS} != &quot;0&quot; ]]; then
        echo &quot;Schema creation failed&quot;
        exit ${STATUS}
      fi
        fi
       cd /opt/checkouts/oss_deployment/scripts
       ./tmpdeploy.sh -a oss_bar -e ${DeployTarg} -r ${Version} -v
       echo &quot;&lt;td&gt;oss_bar-${Version}&quot; &gt; /var/www/html/${DeployTarg}/bar.txt
       ;;
################################################
    smsi-admin)
      Deployed_Version=`ssh tcserver@${targname} &quot;grep Implementation-Version /opt/tcserver/instances/smsi-admin/webapps/smsi-admin/META-INF/MANIFEST.MF | cut -d : -f 2 | tr -d &apos; &apos;  | tr -d &apos;\r&apos;&quot;`
      Version=`ssh tcserver@dvappdai01 &quot;grep Implementation-Version /opt/tcserver/instances/smsi-admin/webapps/smsi-admin/META-INF/MANIFEST.MF | cut -d : -f 2 | tr -d &apos; &apos;  | tr -d &apos;\r&apos;&quot;`
       cd /opt/checkouts/oss_deployment/scripts
       echo &quot;&lt;b&gt;Upgrading ${Component} from ${Deployed_Version} to ${Version}&lt;/b&gt;&lt;br&gt;&quot; &gt;&gt; /opt/build/scm/scripts/buildServer/log/${BUILD_TAG}.log
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;Upgrading ${Component} from ${Deployed_Version} to ${Version}&quot;
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;&quot;

       ./tmpdeployapp.sh -a smsi-admin -t ${Component} -e ${DeployTarg} -r ${Version} -i smsi-admin -v
       echo &quot;smsi-admin-${Version}&quot; &gt; /var/www/html/${DeployTarg}/smsi-admin.txt
       ;;
################################################
    smsi-publisher)
       Deployed_Version=`ssh tcserver@${targname} &quot;grep Implementation-Version /opt/tcserver/instances/smsipub/webapps/smsi-publisher*/META-INF/MANIFEST.MF | cut -d : -f 2 | tr -d &apos; &apos;  | tr -d &apos;\r&apos;&quot;`
       Version=`ssh tcserver@dvappdai01 &quot;grep Implementation-Version /opt/tcserver/instances/smsipub/webapps/smsi-publisher*/META-INF/MANIFEST.MF | cut -d : -f 2 | tr -d &apos; &apos;  | tr -d &apos;\r&apos;&quot;`
       /opt/build/scripts/tcServerAdmin.sh ${targname} smsipub stop
       echo &quot;&lt;b&gt;Upgrading ${Component} from ${Deployed_Version} to ${Version}&lt;/b&gt;&lt;br&gt;&quot; &gt;&gt; /opt/build/scm/scripts/buildServer/log/${BUILD_TAG}.log
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;Upgrading ${Component} from ${Deployed_Version} to ${Version}&quot;
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;&quot;
       cd /opt/build/scripts
       ./kill_dbsessions.sh -a smsi-publisher -e ${DeployTarg}
       if [[ ${DB_Rebuild} = &quot;Yes&quot; ]] ; then
        cd /opt/checkouts/smsi-publisher/config/cisys
        export SQLCONN=&quot;(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=${DBIP})(PORT=1522)))(CONNECT_DATA=(SERVICE_NAME=${SIDTarg})))&quot;
sqlplus -S cm_system/oracle123@$SQLCONN &lt;&lt;!
set heading off
define DeployTarg=&apos;$DeployTarg&apos;
set verify off
@genUser.${DeployTarg}.sql
exit sql.sqlcode
!
      STATUS=${?}
      if [[ ${STATUS} != &quot;0&quot; ]]; then
        echo &quot;Schema creation failed&quot;
        exit ${STATUS}
      fi
       fi
       cd /opt/checkouts/oss_deployment/scripts
        ./tmpdeploy.sh -a ${Component} -e ${DeployTarg} -r ${Version} -v 
       echo &quot;smsi-publisher-${Version}&quot; &gt; /var/www/html/${DeployTarg}/smsipub.txt
       ;;
################################################
    caas-core)

      cd /opt/build/scripts
      Deployed_Version=`./check_dbversions.sh -a caas-core -e ${DeployTarg}`
      Version=`./check_dbversions.sh -a caas-core -e devint`
       STATUS=${?}
         if [[ ${STATUS} != &quot;0&quot; ]]; then
            echo &quot;Check version status failed&quot;
         exit ${STATUS}
         fi
      echo &quot;&lt;b&gt;Upgrading ${Component} from ${Deployed_Version} to ${Version}&lt;/b&gt;&lt;br&gt;&quot; &gt;&gt; /opt/build/scm/scripts/buildServer/log/${BUILD_TAG}.log
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;Upgrading ${Component} from ${Deployed_Version} to ${Version}&quot;
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;&quot;

      /opt/build/scripts/roottcServerAdmin.sh ${targname} stop
      ./kill_dbsessions.sh -a caas-core -e ${DeployTarg}
      if [[ ${DB_Rebuild} = &quot;Yes&quot; ]] ; then
        cd /opt/checkouts/caas-core/core/model/src/main/resources/liquibase/cisys
        export SQLCONN=&quot;(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=${DBIP})(PORT=1522)))(CONNECT_DATA=(SERVICE_NAME=${SIDTarg})))&quot;
sqlplus -S cm_system/oracle123@$SQLCONN &lt;&lt;!
set heading off
define DeployTarg=&apos;$DeployTarg&apos;
set verify off
@genUser.${DeployTarg}.sql
exit sql.sqlcode
!
      STATUS=${?}
       if [[ ${STATUS} != &quot;0&quot; ]]; then
        echo &quot;Schema creation failed&quot;
        exit ${STATUS}
       fi
      fi
      cd /opt/checkouts/oss_deployment/scripts
     ./deployRebuildDb.sh -a caas-core -t caas-core -i cm -r ${Version} -e ${DeployTarg} -j &quot;${JDBC_URL}&quot; -p ${DB_PASS} -u ${DB_USER} -v
      cd /opt/build/scripts
      ETL_VERS=`./check_dbversions.sh -a dai-etl-feeder -e ${DeployTarg}`
      echo &quot;&lt;td bgcolor=\&quot;lightyellow\&quot;&gt;&lt;font color=red&gt;Needs update&lt;br&gt;dai-etl-feeder_${ETL_VERS}&lt;/font&gt;&quot; &gt; /var/www/html/${DeployTarg}/etldb.txt
      BAR_VERS=`ssh tcserver@${targname} &quot;grep Implementation-Version /opt/tcserver/instances/oss_bar/webapps/oss_bar/META-INF/MANIFEST.MF | cut -d : -f 2 | tr -d &apos; &apos;  | tr -d &apos;\r&apos;&quot;`
      echo &quot;&lt;td bgcolor=\&quot;lightyellow\&quot;&gt;&lt;font color=red&gt;Needs update&lt;br&gt;oss_bar_${BAR_VERS}&lt;/font&gt;&quot; &gt; /var/www/html/${DeployTarg}/bardb.txt
      echo &quot;caas-core-${Version}&quot; &gt; /var/www/html/${DeployTarg}/caas-coredb.txt
     /opt/build/scripts/roottcServerAdmin.sh ${targname} start

;;
################################################
    ads-core)

      cd /opt/build/scripts
      Deployed_Version=`./check_dbversions.sh -a ads-core -e ${DeployTarg}`
      Version=`./check_dbversions.sh -a ads-core -e devint`
       STATUS=${?}
         if [[ ${STATUS} != &quot;0&quot; ]]; then
            echo &quot;Check version status failed&quot;
         exit ${STATUS}
         fi
       echo &quot;&lt;b&gt;Upgrading ${Component} from ${Deployed_Version} to ${Version}&lt;/b&gt;&lt;br&gt;&quot; &gt;&gt; /opt/build/scm/scripts/buildServer/log/${BUILD_TAG}.log
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;Upgrading ${Component} from ${Deployed_Version} to ${Version}&quot;
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;&quot;

     /opt/build/scripts/roottcServerAdmin.sh ${targname} stop
      ./kill_dbsessions.sh -a ads-core -e ${DeployTarg}
      if [[ ${DB_Rebuild} = &quot;Yes&quot; ]] ; then
        cd /opt/checkouts/ads-core/core/model/src/main/resources/liquibase/cisys
        export SQLCONN=&quot;(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=${DBIP})(PORT=1522)))(CONNECT_DATA=(SERVICE_NAME=${SIDTarg})))&quot;
sqlplus -S cm_system/oracle123@$SQLCONN &lt;&lt;!
set heading off
define DeployTarg=&apos;$DeployTarg&apos;
set verify off
@genUser.${DeployTarg}.sql
exit sql.sqlcode
!
      STATUS=${?}
      if [[ ${STATUS} != &quot;0&quot; ]]; then
        echo &quot;Schema creation failed&quot;
        exit ${STATUS}
      fi
    fi
    cd /opt/checkouts/oss_deployment/scripts
     ./deployRebuildDb.sh -a ads-core -t ads-core -i cm -r ${Version} -e ${DeployTarg} -j &quot;${JDBC_URL}&quot; -p ${DB_PASS} -u ${DB_USER} -v
    echo &quot;ads-core-${Version}&quot; &gt; /var/www/html/${DeployTarg}/ads-coredb.txt
    /opt/build/scripts/roottcServerAdmin.sh ${targname} start

;;
################################################
    dai-etl-feeder)
     /opt/build/scripts/tcServerAdmin.sh ${targname} oss_bar stop
     /opt/build/scripts/tcServerAdmin.sh ${targname} smsi stop
     /opt/build/scripts/tcServerAdmin.sh ${targname} smsi-admin stop
      cd /opt/build/scripts
      Deployed_Version=`./check_dbversions.sh -a dai-etl-feeder -e ${DeployTarg}`
      Version=`./check_dbversions.sh -a dai-etl-feeder -e devint`
       STATUS=${?}
         if [[ ${STATUS} != &quot;0&quot; ]]; then
            echo &quot;Check version status failed.  Do you need to do a PackageDeploy first?&quot;
         exit ${STATUS}
         fi
       echo &quot;&lt;b&gt;Upgrading ${Component} from ${Deployed_Version} to ${Version}&lt;/b&gt;&lt;br&gt;&quot; &gt;&gt; /opt/build/scm/scripts/buildServer/log/${BUILD_TAG}.log
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;Upgrading ${Component} from ${Deployed_Version} to ${Version}&quot;
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;&quot;

    ./kill_dbsessions.sh -a dai-etl-feeder -e ${DeployTarg}
    if [[ ${DB_Rebuild} = &quot;Yes&quot; ]] ; then
      cd /opt/checkouts/dai-etl-feeder/src/main/resources/liquibase/cisys
      export SQLCONN=&quot;(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=${DBIP})(PORT=1522)))(CONNECT_DATA=(SERVICE_NAME=${SIDTarg})))&quot;
sqlplus -S cm_system/oracle123@$SQLCONN &lt;&lt;!
set heading off
define DeployTarg=&apos;$DeployTarg&apos;
set verify off
@genUser.${DeployTarg}.sql
exit sql.sqlcode
!
      STATUS=${?}
      if [[ ${STATUS} != &quot;0&quot; ]]; then
        echo &quot;Schema creation failed.  Are there users sessions that need to be destroyed?&quot;
        exit ${STATUS}
      fi
    fi
    cd /opt/checkouts/oss_deployment/scripts
    ./deployJarRebuild.sh -a ${Component} -t ${Component} -e ${DeployTarg} -r ${Version} -j &quot;${JDBC_URL}&quot; -p ${DB_PASS}  -u ${DB_USER} -c ${ETL_CAAS} -b ${ETL_BAR} -o ${ETL_BILLING} -v
     /opt/build/scripts/tcServerAdmin.sh ${targname} oss_bar start
     /opt/build/scripts/tcServerAdmin.sh ${targname} smsi start
     /opt/build/scripts/tcServerAdmin.sh ${targname} smsi-admin start
    echo &quot;&lt;td&gt;dai-etl-feeder-${Version}&quot; &gt; /var/www/html/${DeployTarg}/etldb.txt
;;
################################################
    ops-dt-domain)
     /opt/build/scm/scripts/buildServer/groovy/bin/tcServerAdmin.sh ${DeployTarg} dce-agent-001 stop
     /opt/build/scm/scripts/buildServer/groovy/bin/tcServerAdmin.sh ${DeployTarg} dce-agent-002 stop
     cd /opt/build/scripts
     Deployed_Version=`./check_dbversions.sh -a ${Component} -e ${DeployTarg}`
     Version=`./check_dbversions.sh -a ${Component} -e devint`
       STATUS=${?}
         if [[ ${STATUS} != &quot;0&quot; ]]; then
            echo &quot;Check version status failed.  Do you need to do a PackageDeploy first?&quot;
         exit ${STATUS}
         fi
       echo &quot;&lt;b&gt;Upgrading ${Component} from ${Deployed_Version} to ${Version}&lt;/b&gt;&lt;br&gt;&quot; &gt;&gt; /opt/build/scm/scripts/buildServer/log/${BUILD_TAG}.log
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;Upgrading ${Component} from ${Deployed_Version} to ${Version}&quot;
       echo &quot;-----------------------------------------------------------------------------------&quot;
       echo &quot;&quot;

    ./kill_dbsessions.sh -a ${Component} -e ${DeployTarg}
     cd /opt/checkouts/ops-dt-domain/grails-app/migrations/cisys
     export SQLCONN=&quot;(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=${DBIP})(PORT=1522)))(CONNECT_DATA=(SERVICE_NAME=${SIDTarg})))&quot;
sqlplus -S cm_system/oracle123@$SQLCONN &lt;&lt;!
set heading off
define DeployTarg=&apos;$DeployTarg&apos;
set verify off
@genUser.${DeployTarg}.sql
exit sql.sqlcode
!
      STATUS=${?}
      if [[ ${STATUS} != &quot;0&quot; ]]; then
        echo &quot;Schema creation failed.  Are there users sessions that need to be destroyed?&quot;
        exit ${STATUS}
      fi

    cd /opt/checkouts/oss_deployment/scripts
    ./deployRebuildDb.sh -a ${Comnponent} -t ${Component} -i ops-dt -r ${VERSION} -e ${DeployTarg} -j &quot;${JDBC_URL}&quot; -p ${DB_PASS} -u ${DB_USER} -v
    /opt/build/scm/scripts/buildServer/groovy/bin/tcServerAdmin.sh ${DeployTarg} dce-agent-001 start
    /opt/build/scm/scripts/buildServer/groovy/bin/tcServerAdmin.sh ${DeployTarg} dce-agent-002 start
    echo &quot;ops-dt-db-${VERSION}&quot; &gt; /var/www/html/${DeployTarg}/opsdtdb.txt
;;
esac

done

echo &quot;&lt;b&gt;URL For Deploy output: &lt;/b&gt;&lt;a href=&quot;${BUILD_URL}console&quot;&gt;console&lt;/a&gt;&lt;br&gt;&quot; &gt;&gt; /opt/build/scm/scripts/buildServer/log/${BUILD_TAG}.log
echo &quot;&lt;hr&gt;&quot; &gt;&gt; /opt/build/scm/scripts/buildServer/log/${BUILD_TAG}.log
echo &quot;&lt;p&gt;&quot; &gt;&gt; /opt/build/scm/scripts/buildServer/log/${BUILD_TAG}.log
mv /opt/build/scm/scripts/buildServer/log/${DeployTarg}.html /opt/build/scm/scripts/buildServer/log/${DeployTarg}.tmp
cat /opt/build/scm/scripts/buildServer/log/${BUILD_TAG}.log /opt/build/scm/scripts/buildServer/log/${DeployTarg}.tmp &gt; /opt/build/scm/scripts/buildServer/log/${DeployTarg}.html
rm /opt/build/scm/scripts/buildServer/log/${DeployTarg}.tmp
rm /opt/build/scm/scripts/buildServer/log/${BUILD_TAG}.log
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>